name: Build and Deploy Docker Image to ECS

on:
  push:
    paths:
      - 'app/**'   # Trigger this workflow when changes are made to files in the `app` directory.
      - '.github/workflows/app_workflow.yml'  # Optional: trigger on workflow changes as well.
  workflow_dispatch:  # This allows you to trigger the action manually from GitHub UI.

env:
  AWS_REGION: ca-central-1

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Capture CDK Stack Outputs
        id: cdk_outputs
        run: |
          ECR_URI=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='EcrRepoUri'].OutputValue" --output text)
          CLUSTER_NAME=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='ClusterName'].OutputValue" --output text)
          TASK_DEFINITION_NAME=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='TaskDefinitionName'].OutputValue" --output text)
          TASK_DEFINITION_ARN=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='TaskDefinitionArn'].OutputValue" --output text)
          SERVICE_NAME=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='ServiceName'].OutputValue" --output text)
          CONTAINER_NAME=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='ContainerName'].OutputValue" --output text)
          echo "ECR_URI=$ECR_URI" >> "$GITHUB_OUTPUT"
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> "$GITHUB_OUTPUT"
          echo "SERVICE_NAME=$SERVICE_NAME" >> "$GITHUB_OUTPUT"
          echo "TASK_DEFINITION_NAME=$TASK_DEFINITION_NAME" >> "$GITHUB_OUTPUT"
          echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> "$GITHUB_OUTPUT"
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> "$GITHUB_OUTPUT"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_URI: ${{ steps.cdk_outputs.outputs.ECR_URI }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: app
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_URI:$IMAGE_TAG .
          docker push $ECR_URI:$IMAGE_TAG
          echo "image=$ECR_URI:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Download task definition
        env:
          TASK_DEFINITION_FAMILY: ${{ steps.cdk_outputs.outputs.TASK_DEFINITION_NAME }}
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: task-definition.json
          container-name: ${{ steps.cdk_outputs.outputs.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ steps.cdk_outputs.outputs.SERVICE_NAME }}
          cluster: ${{ steps.cdk_outputs.outputs.CLUSTER_NAME }}
          wait-for-service-stability: true