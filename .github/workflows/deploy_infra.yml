name: Build and Deploy Docker Image to ECS

on:
  push:
    paths:
      - '/lib/**'   # Trigger this workflow when changes are made to files in the `lib` directory.
      - '/bin/**'   # Trigger this workflow when changes are made to files in the `bin` directory.
      - '.github/workflows/deploy_infra.yml'  # Optional: trigger on workflow changes as well.
  workflow_dispatch:  # This allows you to trigger the action manually from GitHub UI.

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures full repo history

      # Step 2: Set up AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1  # Change the region to your desired AWS region
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
  
      - name: Install dependencies
        run: npm install

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: List project files
        run: ls -R

      # Step 3: Deploy CDK Stack (to extract the outputs)
      - name: Deploy CDK Stack
        run: |
          cdk synth
          cdk deploy --require-approval never

      # Step 4: Capture CDK Outputs (ECR Repo, Cluster Name, Task Definition Name)
      - name: Capture CDK Stack Outputs
        id: cdk_outputs
        run: |
          ECR_URI=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='EcrRepoUri'].OutputValue" --output text)
          CLUSTER_NAME=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='ClusterName'].OutputValue" --output text)
          TASK_DEFINITION_NAME=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='TaskDefinitionName'].OutputValue" --output text)
          CONTAINER_NAME=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='ContainerName'].OutputValue" --output text)
          echo "::set-output name=ecr_uri::$ECR_URI"
          echo "::set-output name=cluster_name::$CLUSTER_NAME"
          echo "::set-output name=task_definition_name::$TASK_DEFINITION_NAME"
          echo "::set-output name=container_name::$CONTAINER_NAME"